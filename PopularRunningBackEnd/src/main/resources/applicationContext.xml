<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:oxm="http://www.springframework.org/schema/oxm"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
       http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!-- Component scan to find all Spring components -->
    <context:component-scan base-package="com.popular.running" />
    
    <!-- holding properties for database connectivity /-->
    <context:property-placeholder location="classpath:jdbc.properties,hibernate.properties"/>

    <!-- enabling annotation driven configuration /-->
    <context:annotation-config/>
    
    <!-- Data Source -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url">
               <ref bean="dataBaseUrl"/>
        </property>
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="maxActive" value="${jdbc.maxActive}" />
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
        <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}" />
    </bean>
    
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="database" value="HSQL" />
            </bean>
        </property>
    </bean>
    
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- enabling transaction annotation driven configuration /-->
    <tx:annotation-driven transaction-manager="transactionManager" />
    
    <!--**** Reverse Group DAO Setup ****-->
    <!--
            Need one search processor and one metadata util per persistence unit
            (i.e. EntityManagerFactory). We're wiring these to the Generic DAOs
            using an autowire annotation in BaseDAO.
    -->
    <bean id="searchProcessor" class="com.googlecode.genericdao.search.jpa.JPASearchProcessor">
            <constructor-arg ref="metadataUtil" />
    </bean>

    <bean id="metadataUtil" class="com.googlecode.genericdao.search.jpa.hibernate.HibernateMetadataUtil"
            factory-method="getInstanceForEntityManagerFactory">
            <constructor-arg ref="entityManagerFactory" />
    </bean>

    <!-- Hibernate Session Factory  -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />

        <!-- Hibernate configuration -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.connection.autocommit">${hibernate.connection.autocommit}</prop>
                <prop key="hibernate.transaction.flush_before_completion">${hibernate.transaction.flush_before_completion}</prop>
                <prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
                <prop key="hibernate.order_updates">${hibernate.order_updates}</prop>
                <prop key="hibernate.cglib.use_reflection_optimizer">${hibernate.cglib.use_reflection_optimizer}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.connection.shutdown">${hibernate.connection.shutdown}</prop> 				
            </props>
        </property>

        <!-- The packages that contain our Hibernate model classes -->
        <property name="packagesToScan">
            <list>
                <value>com.popular.running.model</value>
            </list>
        </property>
    </bean>

    
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean> 
    
    <!--**** Application components ****-->
    <bean id="cityService" class="com.popular.running.service.impl.CityServiceImpl">
    	<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>
    <bean id="distanceService" class="com.popular.running.service.impl.DistanceServiceImpl">
    	<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>
    <bean id="stateService" class="com.popular.running.service.impl.StateServiceImpl">
    	<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>
    <bean id="runningEventService" class="com.popular.running.service.impl.RunningEventServiceImpl">
    	<property name="hibernateTemplate">
			<ref bean="hibernateTemplate" />
		</property>
	</bean>
    
    <!--
    If your are not running in Web this will initialize with the directory from    
    the  process was started note that this classes is a singleton so if you are running in web 
    the listener already have initialize the class with the path of the class
    -->

    <bean id="hsqlDatabasePathResolver" class="com.popular.running.listeners.HsqlDatabasePathResolver" factory-method="getInstance" lazy-init="false">
            <constructor-arg>
                <value>${user.dir}</value>
            </constructor-arg>
    </bean>

    <!--This bean just replace {apppath} whit the absolute path-->
    <bean id="dataBaseUrl" class="java.lang.String" factory-bean="hsqlDatabasePathResolver" lazy-init="false"
          factory-method="getUrlDatabase">
            <constructor-arg>
                <value>jdbc:hsqldb:file:{apppath}${jdbc.url}</value>
            </constructor-arg>
    </bean>  
</beans>